package com.ysten.ystenreport.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ysten.ystenreport.bean.SaveCrashBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SAVE_CRASH_BEAN".
*/
public class SaveCrashBeanDao extends AbstractDao<SaveCrashBean, Long> {

    public static final String TABLENAME = "SAVE_CRASH_BEAN";

    /**
     * Properties of entity SaveCrashBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Pid = new Property(1, String.class, "pid", false, "PID");
        public final static Property PackageName = new Property(2, String.class, "packageName", false, "PACKAGE_NAME");
        public final static Property CrashTime = new Property(3, String.class, "crashTime", false, "CRASH_TIME");
        public final static Property CrashLog = new Property(4, String.class, "crashLog", false, "CRASH_LOG");
        public final static Property Type = new Property(5, String.class, "type", false, "TYPE");
        public final static Property IsReport = new Property(6, boolean.class, "isReport", false, "IS_REPORT");
    }


    public SaveCrashBeanDao(DaoConfig config) {
        super(config);
    }
    
    public SaveCrashBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SAVE_CRASH_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"PID\" TEXT," + // 1: pid
                "\"PACKAGE_NAME\" TEXT," + // 2: packageName
                "\"CRASH_TIME\" TEXT," + // 3: crashTime
                "\"CRASH_LOG\" TEXT," + // 4: crashLog
                "\"TYPE\" TEXT," + // 5: type
                "\"IS_REPORT\" INTEGER NOT NULL );"); // 6: isReport
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SAVE_CRASH_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SaveCrashBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String pid = entity.getPid();
        if (pid != null) {
            stmt.bindString(2, pid);
        }
 
        String packageName = entity.getPackageName();
        if (packageName != null) {
            stmt.bindString(3, packageName);
        }
 
        String crashTime = entity.getCrashTime();
        if (crashTime != null) {
            stmt.bindString(4, crashTime);
        }
 
        String crashLog = entity.getCrashLog();
        if (crashLog != null) {
            stmt.bindString(5, crashLog);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(6, type);
        }
        stmt.bindLong(7, entity.getIsReport() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SaveCrashBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String pid = entity.getPid();
        if (pid != null) {
            stmt.bindString(2, pid);
        }
 
        String packageName = entity.getPackageName();
        if (packageName != null) {
            stmt.bindString(3, packageName);
        }
 
        String crashTime = entity.getCrashTime();
        if (crashTime != null) {
            stmt.bindString(4, crashTime);
        }
 
        String crashLog = entity.getCrashLog();
        if (crashLog != null) {
            stmt.bindString(5, crashLog);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(6, type);
        }
        stmt.bindLong(7, entity.getIsReport() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public SaveCrashBean readEntity(Cursor cursor, int offset) {
        SaveCrashBean entity = new SaveCrashBean( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // pid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // packageName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // crashTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // crashLog
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // type
            cursor.getShort(offset + 6) != 0 // isReport
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SaveCrashBean entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setPid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPackageName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCrashTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCrashLog(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsReport(cursor.getShort(offset + 6) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SaveCrashBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SaveCrashBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SaveCrashBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
